<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gil Kim</title>
    <description>Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 31 Jan 2019 20:28:16 +0900</pubDate>
    <lastBuildDate>Thu, 31 Jan 2019 20:28:16 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Getting started with Serverless and AWS</title>
        <description>&lt;h1 id=&quot;serverless-setup-with-aws&quot;&gt;Serverless setup with AWS&lt;/h1&gt;

&lt;p&gt;Setting up a completely automated serverless setup on AWS can be a very hefty task. It will require a lot of efforts, configuring various services, keeping a note of what to link where, IAM roles etc. This not only requires a lot of research but consumes a lot of time as well.&lt;/p&gt;

&lt;p&gt;Serverless solves all the problem of configurations, linking and creating roles and permissions, letting you focus on business logic and getting things done in few keystrokes.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will be creating a sample “hello world” program in &lt;em&gt;Lambda&lt;/em&gt; (NodeJS), using &lt;em&gt;API Gateway&lt;/em&gt; which will output the results on browser.  In the next tutorial, I will help setting up dynamodb so you can have a datastore. We can also use RDS.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;An AWS account&lt;/li&gt;
  &lt;li&gt;Any local machine (I use linux)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-up-aws&quot;&gt;Setting up AWS&lt;/h2&gt;

&lt;p&gt;Setting up AWS is the easy part. You just have to goto &lt;a href=&quot;http://console.aws.amazon.com&quot;&gt;console.aws.amazon.com&lt;/a&gt; and signup for an account. You have to link a credit card for verification. Its free for an year so you won’t be charged and test out things for sake of this tutorial.&lt;/p&gt;

&lt;p&gt;Once account setup is done, go to IAM section and create a new user, making the access type &lt;code class=&quot;highlighter-rouge&quot;&gt;programmatic&lt;/code&gt; (NOTE: it is going to provide you with access key id and secret which will be used later on).&lt;/p&gt;

&lt;p&gt;Next screen will take you to add permission to this user, where you can create a new group or choose from any existing one. Click &lt;em&gt;Create Group&lt;/em&gt;  to begin, which will bring a popup asking for name and roles. Since you are new, create a new group with any name of your choice. &lt;strong&gt;Select Administrator access&lt;/strong&gt; as role for this user since it will be easiest route to go. Hit &lt;em&gt;Create Group&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;Move on to next step &lt;em&gt;Review&lt;/em&gt; where you can tally if user have the administrator access and programmatic authentication type. Finally, hit &lt;em&gt;Create User&lt;/em&gt; which will suffice and complete the process.&lt;/p&gt;

&lt;p&gt;You will be presented with the accesskey and secret which you should copy down somewhere safe. There is also a &lt;em&gt;download&lt;/em&gt; option to download them in csv.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ETA: 5 mins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setting-up-serverless&quot;&gt;Setting up Serverless&lt;/h2&gt;

&lt;p&gt;We are going to need following AWS entities to get things rolling:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lambda (for processing)&lt;/li&gt;
  &lt;li&gt;API Gateway (for API)&lt;/li&gt;
  &lt;li&gt;CloudWatch (for logging)&lt;/li&gt;
  &lt;li&gt;IAM roles (for permissions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will be enough to get a presentable state of our demo up and running in minutes. Lets get things going.&lt;/p&gt;

&lt;p&gt;All serverless need is a config files which will determine how to configure things on AWS.
To do so, First, it needs to know AWS account and region so it can use it to deploy applications.&lt;/p&gt;

&lt;h3 id=&quot;1-setting-up-local-aws-credentials&quot;&gt;1. Setting up local aws credentials&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Manual Way&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a directory .aws in your home directory (~/.aws on *nix, C:\Users\USER_NAME\.aws).&lt;/li&gt;
  &lt;li&gt;Create config file in .aws with following contents
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
output = json
region = us-west-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create credentials file in .aws with following contents
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
aws_access_key_id = &amp;lt;your-access-key-id&amp;gt;
aws_secret_access_key = &amp;lt;your-secret-access-key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Read More: https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;** Automated Way**&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download and set AWS CLI on your machine. &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/setup-awscli.html&quot;&gt;Instructions here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;run &lt;code class=&quot;highlighter-rouge&quot;&gt;aws configure&lt;/code&gt; and answer the prompt questions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;creating-serverless-configuration-file&quot;&gt;Creating Serverless configuration file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Create a project directory and enter it&lt;/li&gt;
  &lt;li&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter following content:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;serverless-helloworld&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;frameworkVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;=1.1.0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;2.0.0&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodejs8.10&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${self:service}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;WORLD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;world'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello/index.hello&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;get&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although, pretty much self explanatory, let me summarize this for you.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;provider&lt;/code&gt; key tells serverless what aws providers are we going to use and which versions of them, such as lambda runner, dynamodb etc. This is kind of versioning aspect of the&lt;/p&gt;

&lt;p&gt;This is a good place to set &lt;strong&gt;environment variables&lt;/strong&gt; too. For instance, we are setting up &lt;em&gt;SERVICE_NAME&lt;/em&gt;, &lt;em&gt;WORLD&lt;/em&gt; as variables, which can be accessed inside our lambda node functions as &lt;code class=&quot;highlighter-rouge&quot;&gt;process.env.SERVICE_NAME&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;process.env.WORLD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Serverless supports &lt;em&gt;event per function&lt;/em&gt; kinda configuration. Hence, we write the lambda handlers and the events on which it is going to respond.
Various types of events are supported such as API Gateway, S3, SQS, CloudWatch etc. Since we are going to process as soon as we get an API request, we will be using API gateway event.&lt;/p&gt;

&lt;p&gt;We can respond to same kind of process in response to various kind of events. For ex- You may want to write logs if file is uploaded to s3, but also when certain API request is being made, same lambda handler can be used to handle both the events. For now, we will only respond to API event(HTTP).&lt;/p&gt;

&lt;p&gt;Hence, the basic configuration may look like:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;custom-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;file-location-without-js-suffix&amp;gt;.&amp;lt;method-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;event-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;lt;event-configurations&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;another-event-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;lt;event-configurations&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Serverless configures events&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This tells the event type will be http and values provides the configurations, such as for which path the event should be triggered etc. You got this gist.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ETA: 10-15 mins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;writing-actual-code&quot;&gt;Writing actual code&lt;/h3&gt;

&lt;p&gt;Lets again look at the configuration, specifically this part:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello/index.hello&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;get&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be translated to:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Create a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; directory (relative to config file), called &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; which will have the function &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; to handle the request and will provide the response.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets write some code.&lt;/p&gt;

&lt;p&gt;NOTE: Since we are using node 8.9.0 (check config again), we can use ES6 features.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Getting query string parameters. It looks something like {a: 'b', c: 1}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryStringParameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryStringParameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WORLD&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;client_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;server_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Success response&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Or Error response like&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*
  //let error = new TypeError('some error')
  callback(error, {
    statusCode: responseType.client_error,
    body: JSON.stringify({ error: 'Any error message' }),
  });
  */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thats it. You are nearly ready to deploy all this. Just execute the following command and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; key to deploy.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;serverless deploy

&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sls deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before making ourselves much happier and comfortable, lets first see what are we getting as input in our lambda handler and what and how are we outputting.&lt;/p&gt;

&lt;p&gt;Starting with the first line:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// shorthand for:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// module.exports = function (event, context, callback) {&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get three parameters to lambda handler (for nodejs):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;event: Provides event sources and variables attached to any of &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html&quot;&gt;AWS Event Sources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;context: This provides lambda context so that you can extract out any piece of information related to this function such as configurations, runtime operations etc. &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&quot;&gt;Read more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;callback: An optional parameter, which will be called after event loop becomes empty. In layman terms, this is the place which will be called “finally” and this is where your response should be.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets dive straightaway into the code now.&lt;/p&gt;

&lt;p&gt;Getting query parameters of an Gateway request is quite easy. You can get them using &lt;code class=&quot;highlighter-rouge&quot;&gt;event.queryStringParameters&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; also provides other necessary info related to requests such as headers. Here is how a sample event object looks like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/test/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/json;q=0.9,image/webp,*/*;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gzip, deflate, lzma, sdch, br&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en-US,en;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pathParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requestContext&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;accountId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;123456789012&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resourceId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us4z18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requestId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;41b45ea3-70b5-11e6-b7bd-69b5aaebc7d9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;identity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userAgent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36 OPR/39.0.2256.48&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resourcePath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/{proxy+}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;httpMethod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/{proxy+}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;httpMethod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queryStringParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting response body is also quite easy. You just have to pass it as &lt;strong&gt;second parameter&lt;/strong&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt; function. This is because the &lt;strong&gt;First parameter&lt;/strong&gt; is reserved for &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; and should be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; if you want to indicate a success response.&lt;/p&gt;

&lt;p&gt;I think its very straighforward. Moving on…&lt;/p&gt;

&lt;h3 id=&quot;deploying-services&quot;&gt;Deploying services&lt;/h3&gt;

&lt;p&gt;Like I’ve said, deployment is easy. Just execute &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless deploy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sls deploy&lt;/code&gt; command and serverless will create the necessary cloudformation stack, upload the package to s3 and cloudformation will take care of creating the necessary architecture. You can sit and relax and have a coffee instead.&lt;/p&gt;

&lt;p&gt;It hardly took 1 hour to get things up and running and having a response, which might’ve took you more if you’re planning to go manual way.&lt;/p&gt;

&lt;p&gt;Hope you’ve liked my efforts. Will keep posting new articles and more on architectures and orchestration. Comment below if you need any help.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Aug 2018 13:53:38 +0900</pubDate>
        <link>http://localhost:4000/get-started-serverless-aws/</link>
        <guid isPermaLink="true">http://localhost:4000/get-started-serverless-aws/</guid>
        
        <category>serverless</category>
        
        <category>aws</category>
        
        
        <category>serverless</category>
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Android UI Thread와 Custom Thread에서의 UI 처리</title>
        <description>&lt;style&gt;
.img-wrapper::before
{
  content: &quot;&quot;;
  display:inline-block;
  vertical-align:middle;
  height:100%;

}
.img-wrapper &gt; span
{
  display:inline-block;
  vertical-align:bottom;
  margin-left: 5px;
}
&lt;/style&gt;

&lt;p&gt;봐도봐도 까먹고, 조금 안사용하면 또 까먹게 되는!! &lt;br /&gt;
Android에서 UI Thread가 어떻게 도는지, 그리고 직접 작성한 Custom Thread에서 UI 처리는 어떻게 하는지 알아보자. &lt;br /&gt;
&lt;img src=&quot;/assets/android_thread/erase-in-my-hair.png&quot; style=&quot;width:200px; margin:20px;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-ui-스레드-구성&quot;&gt;1. UI 스레드 구성&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 구성도
&lt;br /&gt;&lt;img src=&quot;/assets/android_thread/ui-thread.png&quot; style=&quot;width:100%; &quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thread&lt;/em&gt;, &lt;em&gt;Message Queue&lt;/em&gt;, &lt;em&gt;Looper&lt;/em&gt;, &lt;em&gt;Handler&lt;/em&gt; 에 대해서 알아야 한다.  &lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;1. Thread&lt;/strong&gt; &lt;br /&gt;
프로세스 내에서 실행되는 세부 작업의 단위
(백그라운드 작업 처리를 해봤다면 모를 수가 없는 거죠??)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Message Queue&lt;/strong&gt; &lt;br /&gt;
Message 혹은 Task를 담는 Queue이다.
Task는 Runnable 인터페이스를 구현한 오브젝트이다.&lt;br /&gt;
그렇다면, 누가 Message(또는 Task)를 Message Queue에 갖다 놓는건가?? 바로 핸들러이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Handler&lt;/strong&gt; &lt;br /&gt;
핸들러는 두가지 기능이 있다. &lt;br /&gt;
첫째: Looper에게서 받은 Message 또는 Task를 일정 시간동안 수행하는 기능 &lt;br /&gt;
둘째: 외부 스레드로 부터 받은 메시지를 Message Queue에 집어 넣는 기능 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Looper&lt;/strong&gt; &lt;br /&gt;
Message Queue의 내용을 순차적으로 꺼내서 Handler에게 전달해 준다.
&lt;br /&gt;&lt;br /&gt;
자 이제 이 4가지 요소들이 어떻게 돌고 도는건지 이해를 했는가?&lt;/p&gt;

&lt;h3 id=&quot;2-custom-thread에서-ui를-변경하기&quot;&gt;2. Custom Thread에서 UI를 변경하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 우리는 무심코 Thread를 만들고 UI변경 코드를 넣었다가 런타임 에러를 만난적이 있을 것이다.&lt;br /&gt; (컴파일러가 해당 에러를 찾아주지 않아서 초보자가 자주 하는 실수이다.)
&lt;br /&gt;
왜 에러가 났을까?&lt;br /&gt;
에러 메시지를 확인 해보면, Main Thread에서 만 Ui 처리를 할 수 있다고 한다.
왜 그렇게 만들었을까? &lt;br /&gt;
스레드가 병렬처리를 한다고 해도, 같은 자원을 동시에 처리하지 않는다는 100% 보장은 없다.
하나의 TextView의 내용을 바꾸는 스레드가 여러개 있다고 해보자. 어떤 스레드가 먼저 시작하고 먼저 끝날지도 모르고, 동시에 내용을 바꿀 수 도 있고, 또는 TextView를 바꾸고 있는 사이에 바꾸라고 처리를 할 수도 있다. &lt;br /&gt;
그래서! 각 UI 작업들을 일렬로 대기시키고, 하나씩 실행한다면 모든 문제는 해결된다.&lt;br /&gt;&lt;br /&gt;
따라서, UI 변경 Task들은 Main Thread의 Message Queue에 순차적으로 쌓이게 된다.&lt;/p&gt;
&lt;div class=&quot;img-wrapper&quot;&gt;
&lt;img src=&quot;/assets/android_thread//cut-in-line.gif&quot; style=&quot;&quot; /&gt;
&lt;span&gt;&lt;strong&gt;UI를 바꾸고싶으면 줄을 서시오..&lt;/strong&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
그렇다면!! 방법을 알아보도록 하자.
&lt;br /&gt;
1.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;코드&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 자바스크립트 함수를 사용하는데 매개변수 자리에 넣지않는 경우도 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-자바스크립트는-객체지향이-가능한가&quot;&gt;2. 자바스크립트는 객체지향이 가능한가?&lt;/h3&gt;

&lt;p&gt;필자가 주로 사용하는 자바언어는 클래스를 선언하고, 상속을 받는 객체지향 언어입니다.&lt;br /&gt;
자바스크립트의 function을 사용을 많이 해왔지만, 클래스를 선언하고 상속을 하는 코드를 본적이 없습니다.
&lt;br /&gt;하지만 결론적으로 말하자면 자바스트립트도 &lt;strong&gt;객체지향 언어&lt;/strong&gt; 의 형태로 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-프로토타입이란&quot;&gt;3. 프로토타입이란?&lt;/h3&gt;
&lt;p&gt;프로토타입은 객체지향 언어에서 사용하는 클래스와 비슷합니다. &lt;br /&gt;
메모리를 할당받은 실 객체라고 보시면 됩니다.&lt;br /&gt;
자바에서도 최상위 객체가 Object 인것처럼, 자바스크립트에서도 최상위 객체는 Object입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다음의 예제를 통해 더 자세히 알아보겠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tech-knot.github.io/assets/javascript_prototype_2.PNG&quot; alt=&quot;예제1&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Person이라는 함수를 선언하였습니다. 함수를 선언함과 동시에 Person 프로토타입 객체가 만들어 집니다.&lt;/li&gt;
  &lt;li&gt;Person의 프로토타입 객체에 eyes와 nose라는 변수를 선언하였습니다.&lt;/li&gt;
  &lt;li&gt;kim 이라는 Person 객체를 생성하였습니다.&lt;/li&gt;
  &lt;li&gt;kim의 __proto__ 와  Person의 prototype을 출력해보면 같은 결과가 출력됨을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;구조를 살펴보면 다음과 같습니다.&lt;/strong&gt;
&lt;img src=&quot;https://tech-knot.github.io/assets/javascript_prototype_1.PNG&quot; alt=&quot;예제2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Person function을 선언하면, Person프로토타입을 생성하게 됩니다.&lt;br /&gt;
kim도 Person 객체이기 때문에 같은 프로토타입을 가지게 됩니다. (Person 프로토타입을 상속받은 것과 비슷합니다.)&lt;br /&gt;
Person프로토타입의 상위 프로토타입 객체는 Object입니다. 따라서 Person 프로토타입의 __proto__ 는 Object 프로토타입을 가리키게 됩니다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로토타입은 생성자(constructor)를 꼭 가지고 있습니다. &lt;br /&gt;
Person과 Object 프로토타입은 각각 생성자를 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;4-위의-1번에서-언급했던-prototype의-사용-예를-설명드리겠습니다&quot;&gt;4. 위의 1번에서 언급했던 Prototype의 사용 예를 설명드리겠습니다.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; jQuery.prototype 에 backgroundCycle이라는 function을 추가 한 것입니다. &lt;br /&gt;
그러므로 jQuery 의 내장 함수처럼 backgroundCycle 함수를 사용할 수 있게 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;코드&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Array.prototype 에 duplicator라는 function을 추가 한 것입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;출력 결과는  [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 입니다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
[출처]&lt;br /&gt;
&lt;a href=&quot;http://insanehong.kr/post/javascript-prototype/&quot;&gt;Object prototype 이해하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67&quot;&gt;프로토타입 이해하기&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://https-boogil-github-io.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Apr 2018 11:02:38 +0900</pubDate>
        <link>http://localhost:4000/android-thread/</link>
        <guid isPermaLink="true">http://localhost:4000/android-thread/</guid>
        
        <category>filter</category>
        
        <category>image</category>
        
        <category>wordpress</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Javascript에서 Prototype이란?</title>
        <description>&lt;!-- ---
layout: post
title: Javascript에서 Prototype이란?
date:   2018-04-22 11:02:38 +0900
categories: blog jekyll github
excerpt: Javascript에서 객체지향적인 기능을 담당하는 Prototype에 대해서 설명합니다.
author: Gil Kim
--- --&gt;
&lt;p&gt;초급 웹 개발자의 경우는 Javascript에서 변수와 function 정도만 알고 사용하고 있을겁니다. (저도 그러했습니다.)&lt;br /&gt;
그런데 라이브러리를 참조하거나, 코드 검색중에 간결한 자바스크립트 문장을 발견하고, 또는 function을 선언하고 변수를 사용하는 것을 발견한 적이 있었을 것입니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-prototype의-사용-예를-살펴봅시다&quot;&gt;1. Prototype의 사용 예를 살펴봅시다.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 외부 라이브러리를 참조해서 그 코드를 까봤더니 이런 코드도 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;코드&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 자바스크립트 함수를 사용하는데 매개변수 자리에 넣지않는 경우도 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-자바스크립트는-객체지향이-가능한가&quot;&gt;2. 자바스크립트는 객체지향이 가능한가?&lt;/h3&gt;

&lt;p&gt;필자가 주로 사용하는 자바언어는 클래스를 선언하고, 상속을 받는 객체지향 언어입니다.&lt;br /&gt;
자바스크립트의 function을 사용을 많이 해왔지만, 클래스를 선언하고 상속을 하는 코드를 본적이 없습니다.
&lt;br /&gt;하지만 결론적으로 말하자면 자바스트립트도 &lt;strong&gt;객체지향 언어&lt;/strong&gt; 의 형태로 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-프로토타입이란&quot;&gt;3. 프로토타입이란?&lt;/h3&gt;
&lt;p&gt;프로토타입은 객체지향 언어에서 사용하는 클래스와 비슷합니다. &lt;br /&gt;
메모리를 할당받은 실 객체라고 보시면 됩니다.&lt;br /&gt;
자바에서도 최상위 객체가 Object 인것처럼, 자바스크립트에서도 최상위 객체는 Object입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다음의 예제를 통해 더 자세히 알아보겠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tech-knot.github.io/assets/javascript_prototype_2.PNG&quot; alt=&quot;예제1&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Person이라는 함수를 선언하였습니다. 함수를 선언함과 동시에 Person 프로토타입 객체가 만들어 집니다.&lt;/li&gt;
  &lt;li&gt;Person의 프로토타입 객체에 eyes와 nose라는 변수를 선언하였습니다.&lt;/li&gt;
  &lt;li&gt;kim 이라는 Person 객체를 생성하였습니다.&lt;/li&gt;
  &lt;li&gt;kim의 __proto__ 와  Person의 prototype을 출력해보면 같은 결과가 출력됨을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;구조를 살펴보면 다음과 같습니다.&lt;/strong&gt;
&lt;img src=&quot;https://tech-knot.github.io/assets/javascript_prototype_1.PNG&quot; alt=&quot;예제2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Person function을 선언하면, Person프로토타입을 생성하게 됩니다.&lt;br /&gt;
kim도 Person 객체이기 때문에 같은 프로토타입을 가지게 됩니다. (Person 프로토타입을 상속받은 것과 비슷합니다.)&lt;br /&gt;
Person프로토타입의 상위 프로토타입 객체는 Object입니다. 따라서 Person 프로토타입의 __proto__ 는 Object 프로토타입을 가리키게 됩니다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로토타입은 생성자(constructor)를 꼭 가지고 있습니다. &lt;br /&gt;
Person과 Object 프로토타입은 각각 생성자를 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;4-위의-1번에서-언급했던-prototype의-사용-예를-설명드리겠습니다&quot;&gt;4. 위의 1번에서 언급했던 Prototype의 사용 예를 설명드리겠습니다.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; jQuery.prototype 에 backgroundCycle이라는 function을 추가 한 것입니다. &lt;br /&gt;
  그러므로 jQuery 의 내장 함수처럼 backgroundCycle 함수를 사용할 수 있게 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;코드&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Array.prototype 에 duplicator라는 function을 추가 한 것입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duplicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;출력 결과는  [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 입니다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
[출처]&lt;br /&gt;
&lt;a href=&quot;http://insanehong.kr/post/javascript-prototype/&quot;&gt;Object prototype 이해하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67&quot;&gt;프로토타입 이해하기&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Apr 2018 11:02:38 +0900</pubDate>
        <link>http://localhost:4000/javascript-prototype/</link>
        <guid isPermaLink="true">http://localhost:4000/javascript-prototype/</guid>
        
        <category>filter</category>
        
        <category>image</category>
        
        <category>wordpress</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Jekyll 블로그에 댓글 구현하기</title>
        <description>&lt;!-- ---
layout: post
title: Jekyll 블로그에 댓글 구현하기
date:   2017-11-28 11:02:38 +0900
categories: blog jekyll github
excerpt: Jekyll 블로그에 댓글 서비스인 Disqus를 연동하는 방법을 설명합니다.
comments: true
author: Gil Kim
--- --&gt;
&lt;p&gt;Jekyll 블로그는 정적 페이지 입니다. 동적 요소인 댓글 구현을 위해 Disqus 서비스를 많이 이용합니다.
Disqus 서비스를 블로그에 삽입하는 과정을 설명하려고 합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-disqus-회원가입을-먼저-합니다&quot;&gt;1. Disqus 회원가입을 먼저 합니다.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://disqus.com&quot;&gt;Disqus 홈페이지&lt;/a&gt;에 회원가입을 하고, [Get Started]를 찾아서 클릭합니다.&lt;/p&gt;

&lt;p&gt;2가지 선택사항 중에 [I Want to Install Disqus on my site] 를 눌러 다음 페이지로 이동합니다.&lt;/p&gt;

&lt;p&gt;WebSite Name과 Category 를 선택하여 입력합니다. (WebSite Name 예시: user@github.io)&lt;/p&gt;

&lt;p&gt;무료로 진행할 경우 [Continue on Basic]을 선택하여 다음으로 이동합니다.&lt;/p&gt;

&lt;p&gt;사용하는 플랫폼을 선택합니다. (이 블로그는 Jekyll 플랫폼을 사용하였습니다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-jekyll-install-instructions-을-따라합니다&quot;&gt;2. [Jekyll install instructions] 을 따라합니다.&lt;/h3&gt;
&lt;p&gt;[Jekyll install instructions]를 해석해보면 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;&amp;lt;1&amp;gt;&lt;/strong&gt; YAML Front Matter에 &lt;code class=&quot;highlighter-rouge&quot;&gt;comments:true&lt;/code&gt;를 작성합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Getting Started with Android Studio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;user-defined-variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is a text sentence.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;strong&gt;&amp;lt;2&amp;gt;&lt;/strong&gt; Disqus를 로드할 &lt;strong&gt;Universal Embeded Code&lt;/strong&gt; 를 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;원문&amp;gt;
In between a {% if page.comments %} and a {% endif %} tag, copy and paste
the Universal Embed Code in the appropriate template
where you'd like Disqus to load.

&amp;lt;해석&amp;gt;
페이지 코멘트 설정이 되어있으면 (if page.comments),
Disqus를 로드할 **Universal Embeded Code** 를 붙여 넣으면 된다.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Universal Embeded Code란?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Universal Embeded Code 란 사이트에 Disqus를 로드하고 표시하는 JavaScript 코드 입니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Universal Embeded Code 예제&lt;/strong&gt; ( _includes 폴더에 작성된 disqus.html 입니다. )&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; {% if page.comments %} 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DON'T EDIT BELOW THIS LINE&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://https-tech-knot-github-io.disqus.com/embed.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data-timestamp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://disqus.com/?ref_noscript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
 {% endif %} &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고로 이 블로그는 _includes폴더에 disqus.html파일을 따로 만들고, 사용할 post페이지에서 include하여 사용하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;출처: &lt;a href=&quot;https://help.disqus.com/customer/portal/articles/472097-universal-embed-code&quot;&gt;Universal Embed Code란&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Nov 2017 11:02:38 +0900</pubDate>
        <link>http://localhost:4000/jekyll-comments/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-comments/</guid>
        
        <category>filter</category>
        
        <category>image</category>
        
        <category>wordpress</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Git관리를 이렇게 해요</title>
        <description>&lt;!-- ---
layout: post
title: Git관리를 이렇게 해요
date:   2017-11-28 11:02:38 +0900
categories: blog jekyll github
excerpt: 안드로이드 프로젝트에서 Git관리를 어떻게 하는지에 대해서 이야기를 합니다.
comments: true
author: Gil Kim
--- --&gt;
&lt;p&gt;안녕하세요. 오늘 애기할 주제는 안드로이드 스튜디오에서 Git 연동을 어떻게 시작하면 좋을지에 대해서 설명하고자 합니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;시작에-앞서&quot;&gt;시작에 앞서..&lt;/h2&gt;
&lt;p&gt;일단 저희 안드로이드 개발팀은 소규모로 구성되어 있습니다. 2명이서 협업을 한 프로젝트도 있지만, 대부분은 1인 1프로젝트로 진행이 됩니다.
이전에는 Git의 사용용도를 소스 백업정도로 활용해왔습니다. Git의 여러 기능들을 활용하지 않아서 불편했던 점을 개선하고자 Git 사용법을 공부하고 전략을 세우게 되었습니다.
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-flow를-먼저-알고-가자&quot;&gt;Git-flow를 먼저 알고 가자&lt;/h2&gt;
&lt;p&gt;Git-flow란 Git 브랜치를 효과적으로 나누고 관리하는 전략을 말합니다.
크게 5가지의 브랜치가 있습니다.
메인 브랜치로는 master, develop 이 있고, 임시 브랜치로는 feature, release, hotfix가 있습니다. 각 브랜치를 간략하게 설명해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;master: 최종본 브랜치&lt;/li&gt;
  &lt;li&gt;develop: 개발 중인 브랜치&lt;/li&gt;
  &lt;li&gt;feature: 기능 개발용 브랜치&lt;/li&gt;
  &lt;li&gt;release: 이번 버전 출시용 브랜치&lt;/li&gt;
  &lt;li&gt;hotfix: relase 후 발생한 버그 수정용 브랜치&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 그림을 함께 보면 이해가 쉽습니다.&lt;/p&gt;

&lt;p&gt;master브랜치로 시작을 하고, develop 브랜치를 만듭니다. develop 브랜치로 작업을 진행하다가 새로운 기능을 넣기위해 feature브랜치를 만들고 작업을 이어갑니다. (기능에 따라서 여러개의 feature브랜치가 생성됩니다.)
기능이 완료되면 develop 브랜치로 이동해서 feature브랜치를 merge합니다. (브랜치 이동을 checkout이라고 합니다.)
개발이 완료되고 출시를 하기위해 release브랜치를 만듭니다. QA를 진행하고, 발견된 버그 수정작업을 진행합니다.
QA를 모두 통과한 후, release 브랜치를 develop 브랜치로 merge하고, 최종적으로 master 브랜치로 merge합니다.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://3.bp.blogspot.com/-fn9dkyAGwyg/Vm2yi0CeHyI/AAAAAAAAKVY/Op31eQuKzus/s1600/gitflow_1.png&quot; alt=&quot;git-flow 설명&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;나의-git-전략&quot;&gt;나의 Git 전략&lt;/h2&gt;
&lt;p&gt;Git을 시작하면 master브랜치만 존재합니다. 나머지 4가지의 브랜치는 임의로 생성하고 명명한 것들입니다. (develop, feature, release, hotfix)
1인 1프로젝트이고, 개발기간이 주로 2~3개월의 기간인 소규모 프로젝트를 진행하는 입장에서 Git-flow 전략에서 제시한 5가지 브랜치를 모두 이용할 필요는 없다고 판단을 했습니다.
메인 브랜치로 mater, develop을 사용하고, 필요에 따라서 feature브랜치를 만들어 활용하는 방법을 선택하게 되었습니다.&lt;/p&gt;

&lt;p&gt;원칙적으로 feature은 하나의 기능으로 구성되어 있지만, 필요에 따라서 같은 기능이지만 구현방법에 따라 브랜치를 나눠서 작업을 할 수도 있습니다.
A라는 기능을 구현하고자 할때, 구현방법은 다양합니다. 예를들어 3가지 방법의 구현방법이 있다고 가정해보겠습니다.
feature-1, feature-2, feature-3 이렇게 3가지의 feature 브랜치들을 생성하고, 각기 다른 구현방법으로 구현 작업을 진행하였습니다.
최종적으로 feature-2가 가장 좋은 구현방법이라는 결론을 내리고 feature-2를 develop로 merge시킵니다. 그리고 남아있는 3개의 feature 브랜치들은 삭제를 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;다수의-개발자가-협업하는-방법&quot;&gt;다수의 개발자가 협업하는 방법&lt;/h2&gt;
&lt;p&gt;협업시 업무를 분담해서 서로 다른 기능을 개발하게 됩니다. 이런 경우 상대방의 코드를 건드리거나, 오류있는 코드를 업로드하여  프로젝트를 고장나게 하면 안됩니다. 그러므로 개발 브랜치를 나눠서 작업하거나, 애초에 공통 프로젝트에서 여러갈래의 저장소로 Fork하는 방법이 있습니다.&lt;br /&gt;
중요한것은 &lt;strong&gt;Pull Request&lt;/strong&gt; 를 사용해야 합니다. Pull Request란 말 그대로 Pull을 요청하는 것입니다. 자신의 코드를 Pull 하기 전에, 팀원들이나 개발팀장에게 먼저 물어보고, 검토를 다 받으면 그때서야 최종 Pull과 함께 Merge를 진행합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;다수의-개발자가-같은-코드를-수정하여-충돌이-나는-경우도-많다&quot;&gt;다수의 개발자가 같은 코드를 수정하여 충돌이 나는 경우도 많다.&lt;/h2&gt;
&lt;p&gt;코드의 충돌을 방지하기 위해서는 개발자들은 최대한 작업을 나누어서 진행합니다. 그래도 코드 충돌은 날 수 있습니다.
그럴경우에는 먼저 최초 Pull Request를 진행한 뒤에, 다음 Pull을 요청할 개발자가 코드를 받고 충돌 코드 영역을 직접 수정한 후에 Pull Request를 합니다.
충돌 코드 부분에 대해서는 개발팀과 협의를 해서 수정해야 할 부분과 삭제해야 할 부분을 확인하는 과정도 필요합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
[출처]&lt;br /&gt;
&lt;a href=&quot;http://www.continuousimprover.com/2015/12/why-i-am-abandoning-gitflow.html&quot;&gt;Git-Flow 그림&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html&quot;&gt;우아한형제들 기술블로그&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://ourcstory.tistory.com/131&quot;&gt;Fork란 무엇인가&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Nov 2017 11:02:38 +0900</pubDate>
        <link>http://localhost:4000/git/</link>
        <guid isPermaLink="true">http://localhost:4000/git/</guid>
        
        <category>filter</category>
        
        <category>image</category>
        
        <category>wordpress</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Implement Xmpp Chat Client Android Part 2</title>
        <description>
</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2016/06/21/implement-xmpp-chat-client-android-part-2.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/21/implement-xmpp-chat-client-android-part-2.html</guid>
        
        
      </item>
    
      <item>
        <title>Implement series post in Jekyll</title>
        <description>&lt;p&gt;This is a series of posts explaining how to implement a post series in plain simple style, within your favorutie static site generator - &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This post also shows how I already used the system that I am about to explain, to show the post you are reading, as a part of series.&lt;/p&gt;

&lt;p&gt;This post acts as index file for series of posts, i.e. it will list all sub-posts of the series and you can reach any part of it, anytime. A link to this post will also show up in the individual sub-posts, so you can get back here easily. Also, your blog index can list this post as a single entity, rather than listing all sub-posts.&lt;/p&gt;

&lt;p&gt;Below you will find releavent posts explaining the implementation.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/implement-series-post-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/implement-series-post-jekyll/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Implement series post in Jekyll - Part 2</title>
        <description>&lt;p&gt;In the last post of this series, I explained how you can make a series of post and connect it to a singular post, maintaing series index.
We also learnt how I made a bare layout which listed all posts within series.&lt;/p&gt;

&lt;p&gt;This post will explain how to list only series index post on blog index page.&lt;/p&gt;

&lt;p&gt;Open the page where you are showing your blog index. For me, its &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. It will probably contain a paginator loop, something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
	&amp;lt;li&amp;gt;&amp;lt;a href=&quot;{{ post.url }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we need to show posts which are either not a part of any series, or the series index posts, we have to filter out the sub-posts. Quite simple. We just need to check if a post in the loop is series sub-post or not. Still unsure? Check out code below-&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
	{% if post.series == nil %}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endif &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Done.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/implement-series-post-jekyll-part-2/</link>
        <guid isPermaLink="true">http://localhost:4000/implement-series-post-jekyll-part-2/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Implement series post in Jekyll - Part 1</title>
        <description>&lt;p&gt;This is first post in the series explaining how I implemented post series without any ruby-gem or anything, just simple liquid syntaxes.&lt;/p&gt;

&lt;p&gt;The purpose has been stated earlier. I am only going to talk about the implementation now on. Lets get started.&lt;/p&gt;

&lt;p&gt;Since we need a single index page for series post, lets make one. Create a file and fill releavent front matter. Since we need a way to recognize if this is the series page that holds all the sub-posts within, we need to add a variable. I found &lt;code class=&quot;highlighter-rouge&quot;&gt;series-slug&lt;/code&gt; more intimidating, since it is more human readable and makes sense to sub-posts. Thus, the front matter may now look like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Some series title'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;series_slug: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fill in the content for the post. You have created an index page. Lets create sub-posts (parts of series) that series will contain. Lets make two posts to start with. I am calling it &lt;code class=&quot;highlighter-rouge&quot;&gt;post A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;post B&lt;/code&gt;. Create another two files for these and fill in releavent YAML front matter. Now, to link the post to the series post, I am declaring a variable within these posts which will connect them. So, I declared the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;series&lt;/code&gt; in front matter and fill in the series slug I declared earlier. Thus, the front matter for these posts will look like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Part of series post - Part 1'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;series: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good enough. Not so much!! We did declared a series and posts linking to it. However, we still need to show above posts in the series index. Since series has the &lt;code class=&quot;highlighter-rouge&quot;&gt;layout: post&lt;/code&gt;, edit &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; directory. Enter the following line just below YAML front matter in &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% include &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are familier with jekyll, you must know that &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; tag includes a file with the name following it, from &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory. In the above code, I just told jekyll to look for a file &lt;code class=&quot;highlighter-rouge&quot;&gt;post-series.html&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory, and include the code within it to current file. Thus would help me keep my code modular, in a separate place. This will enable me to write the code for post series thing in a single file called &lt;code class=&quot;highlighter-rouge&quot;&gt;post-series.html&lt;/code&gt; and I can just call releavent variables whereever I like to.&lt;/p&gt;

&lt;p&gt;For the series index page, we would like to show up all the sub-posts it contains. Quite easy. We will use a for loop to go threw each posts and check if it has a &lt;code class=&quot;highlighter-rouge&quot;&gt;series&lt;/code&gt; variable in their front matter and if that matches our current series index’s &lt;code class=&quot;highlighter-rouge&quot;&gt;series_slug&lt;/code&gt;. Open up &lt;code class=&quot;highlighter-rouge&quot;&gt;post-series.html&lt;/code&gt; and write the code below:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% comment &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Below&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endcomment &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;  &lt;span class=&quot;sx&quot;&gt;%}

	{% comment %}&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slug?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endcomment &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;series_slug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;series_slug&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}

        {% capture postitem %}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ site.url }}{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt; &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endcapture &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;push: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postitem&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}

    {% endif %}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% comment &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;At&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;them&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;below&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endcomment &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endif &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%} {{ post }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seriesarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endif &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;seriesarray&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt; to show the posts. I’d to show the list after the post content. Thus used the above for loop after &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ content }}&lt;/code&gt;  in &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this works out for you, you can check part 2 of the post where I’ve explained how to list only series index post (instead of sub-posts individually) on the blog index page.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/implement-series-post-jekyll-part-1/</link>
        <guid isPermaLink="true">http://localhost:4000/implement-series-post-jekyll-part-1/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>WordPress: HTML encoded image alternate text</title>
        <description>&lt;p&gt;One problem with wordpress is that it doesn’t allow HTML encoded strings in image alternate text. Even if you provide your image alternate text as a HTML string, wordpress will covert it down to plaintext, removing any HTML attributes and the image will then have only plaintext of your alternate text.&lt;/p&gt;

&lt;p&gt;i.e even if you write your image alternate section such as this&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hey, I am &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&amp;gt;&lt;/span&gt; italic text &lt;span class=&quot;nt&quot;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this would output in frontend as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hey, I am italic text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not cool. Sometimes, you rely on some plugins which reads image alternate text and display below the images in pretty cool style.&lt;/p&gt;

&lt;h2 id=&quot;options&quot;&gt;Options&lt;/h2&gt;

&lt;p&gt;One option which came to my mind is to leave alternate text blank and provide the image &lt;em&gt;caption&lt;/em&gt; in HTML format. For ex, check below image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/wordpess_caption.png&quot; alt=&quot;Wp Caption&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wordpres has this feature where if you leave the alternate text blank, it would fill the caption text in alternate text. I thought it would work since I can provide HTML in captions. But again, the same problem. Captions were turned back into plaintext.&lt;/p&gt;

&lt;p&gt;Thus, for the above image, the output was something like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://yourwebsite.com/path/to/image/image.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, this is sample caption. This text is in bold&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;Luckily, WordPress provides image hooks which you can use to modify image attributes on the fly. The one which I want to use is &lt;a href=&quot;https://developer.wordpress.org/reference/hooks/wp_get_attachment_image_attributes/&quot;&gt;wp_get_attachment_image_attributes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use this hook to see what image attribute we want to change, read its value, format it in HTML and return back our new value.&lt;/p&gt;

&lt;p&gt;Hence, open up your theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; and create a new function where you want to attach this hook. I am calling the function &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_filter_gallery_img_atts&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Filename: functions.php
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;custom_filter_gallery_img_atts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$atts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$attachment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$atts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post_excerpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//This returns image caption (which is in HTML format)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$atts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;nx&quot;&gt;add_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wp_get_attachment_image_attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;custom_filter_gallery_img_atts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we did above is attaching &lt;code class=&quot;highlighter-rouge&quot;&gt;wp_get_attachment_image_attributes&lt;/code&gt; to our custom defined function &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_filter_gallery_img_atts&lt;/code&gt; inside which we read the image caption and stored the value in image alternate text.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the article. If you have any doubts, please comment below. See you soon.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 May 2016 16:20:59 +0900</pubDate>
        <link>http://localhost:4000/wordpress-html-encoded-image-alternate-text/</link>
        <guid isPermaLink="true">http://localhost:4000/wordpress-html-encoded-image-alternate-text/</guid>
        
        <category>filter</category>
        
        <category>image</category>
        
        <category>wordpress</category>
        
        
        <category>Wordpress</category>
        
      </item>
    
      <item>
        <title>Implement XMPP chat client in Android</title>
        <description>&lt;p&gt;Since it would take more than one post to share how to implement XMPP client in android, I made a series post which would explain in better way, the structure of XMPP client. I have tried to keep the code modular such that any part can be reused in any other application. The actual code for whole application can be found at &lt;a href=&quot;https://github.com/ashutosh2k12/XmppDemo&quot;&gt;https://github.com/ashutosh2k12/XmppDemo&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 17:39:37 +0900</pubDate>
        <link>http://localhost:4000/implement-xmpp-chat-client-android/</link>
        <guid isPermaLink="true">http://localhost:4000/implement-xmpp-chat-client-android/</guid>
        
        
        <category>Uncategorized</category>
        
      </item>
    
      <item>
        <title>Implement XMPP chat client in Android &amp;#8211; Part 1</title>
        <description>&lt;h2 id=&quot;part-1---xmpp-basics&quot;&gt;Part 1 - XMPP Basics&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://aboutashu.com/blog/xmpp-chat-server/&quot;&gt;last post&lt;/a&gt; of this series, I talked about setting up XMPP based chat server, using ejabberd. In this post, I will be talking about how to implement XMPP chat client in android and let two users talk to each other. After reading this post series, you’ll be able to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Implement chat system such as whatsapp in your own android app&lt;/li&gt;
  &lt;li&gt;Allow yourself to chat with online users (roasters)&lt;/li&gt;
  &lt;li&gt;Making the chat as service so that chat messages still come through even while app is in background&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since it would be too long to explain everything within a single post, I am going to explain part by part code structure and basics of XMPP here.&lt;/p&gt;

&lt;h2 id=&quot;xmpp-client&quot;&gt;XMPP Client&lt;/h2&gt;

&lt;p&gt;XMPP Clients is a software or application which allows you to connect to XMPP servers for instant messaging with other people. Simple enough!! If you are a frequent internet user, you must’ve used one to many XMPP clients such as pidgin, gtalk, Yahoo! IM etc. which allows you to send Instant Message to other users you are connected to. What we will do this in post is to make one such client in android.&lt;/p&gt;

&lt;h2 id=&quot;what-you-will-need&quot;&gt;What You will need&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;An android IDE for app development. While I prefer &lt;a href=&quot;http://developer.android.com/sdk/index.html&quot;&gt;Android Studio&lt;/a&gt;, &lt;a href=&quot;https://eclipse.org/&quot;&gt;Eclipse&lt;/a&gt; also does the job.&lt;/li&gt;
  &lt;li&gt;Decent Working internet.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;starting-the-project&quot;&gt;Starting the Project&lt;/h2&gt;

&lt;p&gt;Lets begin!!&lt;/p&gt;

&lt;h4 id=&quot;creating-the-project&quot;&gt;Creating the project:&lt;/h4&gt;

&lt;p&gt;Create a blank project in android studio. Once you get to editor screen, add following dependencies to your app specific &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'org.igniterealtime.smack:smack-android-extensions:4.1.0'
compile 'org.igniterealtime.smack:smack-tcp:4.1.0'
compile 'com.google.code.gson:gson:2.6.2'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first two lines are mandatory for getting smack to work on android. The third line (about gson) allows you to convert raw messages in GSON format. Since we will be sending messages in GSON format, I added it to my needs. Check out &lt;a href=&quot;https://github.com/ashutosh2k12/XmppDemo/blob/master/app/build.gradle&quot;&gt;build.gradle&lt;/a&gt; of my app to get an idea.&lt;/p&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Before diving straight into the code, lets understand few things about XMPP and in what manner are we going to implement them.&lt;/p&gt;

&lt;h4 id=&quot;what-is-xmpp&quot;&gt;What is XMPP?&lt;/h4&gt;

&lt;p&gt;XMPP is basically a set of protocols (or rules) to allow communication based on XML. Thus, whenever you send a message, or your presence (available, unavailable etc.) to some other user (or server), it goes out in XML format, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;presence&amp;gt;
  &amp;lt;show&amp;gt;dnd&amp;lt;/show&amp;gt;
&amp;lt;/presence&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we don’t have to go threw this right now. You just need to know that whenever you are seeing someone online, or sending a message, the client communicates with each other in this mannar. Read more about these &lt;a href=&quot;https://xmpp.org/rfcs/rfc3921.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;jabber-id&quot;&gt;Jabber ID&lt;/h4&gt;

&lt;p&gt;Jabber Id or simply JID is a unique ID (just like your username on facebook) which helps you recognize in XMPP environments. Jabber ID is usually in the format &lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain&lt;/code&gt;. Sometimes, you may see your JID in form of &lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain/resource&lt;/code&gt; .Resource is nothing but a string representing your chat environment.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain&lt;/code&gt; sometimes is reffered to as &lt;em&gt;Bare JID&lt;/em&gt; while &lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain/resource&lt;/code&gt; as &lt;em&gt;Full JID&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;roasters&quot;&gt;Roasters&lt;/h4&gt;

&lt;p&gt;Just like you have facebook friends, that only they can check out your shared items, XMPP too does have this security thing of its own kind. Whenever you gets connected to a XMPP server, few things about you travels along to server. So, for example, whenever you login to your GTalk, or pidgin, you instantly gets this “green”  button to show you are online. You also see your last status that you’ve put up. you see your friendlist and online friends from them.&lt;/p&gt;

&lt;p&gt;The information associated with you, as soon as you login to any XMPP client, includes mainly:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your presence information (wether you are available or not)&lt;/li&gt;
  &lt;li&gt;Your status&lt;/li&gt;
  &lt;li&gt;Whom you are subscribed to (and who subscribed to you)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These informations are kept on server in database. XMPP have certain security features that decides who is going to see those informations. For ex, if you are subscribed to User A, and user A is also subscribed to you, then you both can see each other’s presences. However, if only user A has subscribed to you, only you can see his presence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roasters&lt;/strong&gt; are people (or group of people) who are subscribed to you (or you are subscribed to them). They are like your friends on facebook, with limited access depending upon the subscription status between you both.&lt;/p&gt;

&lt;p&gt;To put it simply, the online users that you see in your gtalk are roasters. Any user whom you have added as contact on  XMPP clients are roasters.&lt;/p&gt;

&lt;h4 id=&quot;subscriptions&quot;&gt;Subscriptions&lt;/h4&gt;

&lt;p&gt;Subscriptions is one way of saying &lt;em&gt;sending friend requests&lt;/em&gt;. Just like, when you send someone a friend request on facebook, you subscribe to someone on XMPP. You subscribe to someone by sending them a subscription presence packet to their JID. While I will begin with code, I will show you how to send a subscription packets and receive one. Thus, subscription state exists between two users.&lt;/p&gt;

&lt;p&gt;For sake of simplicity, you just need to know that in order to make someone friends on XMPP, or allowing someone to make you a friend, you need subscription.&lt;/p&gt;

&lt;p&gt;Subscriptions have 4 modes: &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe_none&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe_to&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe_from&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe_both&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;subscribe_none&lt;/strong&gt; - When you are not subscribed in any way to a given user.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;subscribe_to&lt;/strong&gt; - When only you are subscribed to a given user (one way).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;subscribe_from&lt;/strong&gt; - When you are not subscribed in any way to a given user.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;subscribe_both&lt;/strong&gt; - When you are not subscribed in any way to a given user.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 01 May 2016 17:39:37 +0900</pubDate>
        <link>http://localhost:4000/implement-xmpp-chat-client-android-part-1/</link>
        <guid isPermaLink="true">http://localhost:4000/implement-xmpp-chat-client-android-part-1/</guid>
        
        
        <category>Uncategorized</category>
        
      </item>
    
      <item>
        <title>Creating XMPP chat server</title>
        <description>&lt;p&gt;In this part of series, I am going to show you how to create an XMPP chat server.&lt;/p&gt;

&lt;p&gt;To build your own XMPP based chat solution in android, you need to have two important things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;XMPP based chat server&lt;/li&gt;
  &lt;li&gt;XMPP integration in your android code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;XMPP chat server or XMPP server is the one that handles chat database, configurations, user, options etc. Basically, it is a chat server that handles your chat backend. What remains is to implement the chat in your own language and have fun.&lt;/p&gt;

&lt;p&gt;There are many variations of XMPP chat servers available today. You can use any of them depending on your requirements and available configurations. What I would recommend are &lt;a href=&quot;http://www.igniterealtime.org/projects/openfire/&quot;&gt;openfire&lt;/a&gt; and &lt;a href=&quot;https://www.ejabberd.im/&quot;&gt;ejabberd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I am going to use ejabberd to setup XMPP chat server. Let’s get into action. First, you will need a web server.For now, I am using &lt;a href=&quot;https://www.digitalocean.com&quot;&gt;DigitalOcean VPS&lt;/a&gt; with Ubuntu Server 14.04 LTS installed, to host the server. Don’t worry if you do not have a VPS right now. You can still test it with your own localhost machine.&lt;/p&gt;

&lt;h2 id=&quot;installing-ejabberd&quot;&gt;Installing Ejabberd&lt;/h2&gt;

&lt;p&gt;Run following command in your terminal to update current package list.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To install &lt;strong&gt;ejabberd&lt;/strong&gt;, just enter the below command and you are done. So easy.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install ejabberd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install ejabberd and will also create a configuration file which you can edit to have your own jabberd configuration. The ejabberd configuration file can be found at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ejabberd/ejabberd.cfg&lt;/code&gt;. Lets edit it. Back on your terminal screen, enter this command to edit the file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/ejabberd/ejabberd.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will bring up &lt;code class=&quot;highlighter-rouge&quot;&gt;nano&lt;/code&gt; editor, where you can use up and down keys on your keyboard to edit the file. For Ubuntu desktops or other graphical environments, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;gedit&lt;/code&gt;. Hence, use this command instead &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gedit /etc/ejabberd/ejabberd.cfg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the editor screen, You’ll see a lot of text there and lot of options. Don’t panic. You only have edit 3-4 options overall. I will be doing them below, so pay attention.&lt;/p&gt;

&lt;p&gt;The ejabberd.cfg file will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ejabberd_cfg.png&quot; alt=&quot;ejabberd.cfg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use your cursor to move below and find the line which has this text:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%% Admin user
{acl, admin, {user, &quot;admin&quot;, &quot;localhost&quot;}}.

%% Hostname
{hosts, [&quot;localhost&quot;]}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets decode what’s written line by line so that you can get confortable enough to do this on your own next time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin user&lt;/strong&gt; defines what user (user must be registered with ejabberd) holds the administrative privilages of ejabberd server. &lt;code class=&quot;highlighter-rouge&quot;&gt;{acl, admin, {user, &quot;admin&quot;, &quot;localhost&quot;}}.&lt;/code&gt; This line tells that user with username &lt;strong&gt;admin@localhost&lt;/strong&gt; is admin of ejabberd configuration. We can add multiple users here to make them admin. Let’s add one. So, press enter key and add similar line with different username.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{acl, admin, {user, &quot;myusername&quot;, &quot;localhost&quot;}}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file will now look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%% Admin user
{acl, admin, {user, &quot;admin&quot;, &quot;localhost&quot;}}.
{acl, admin, {user, &quot;myusername&quot;, &quot;localhost&quot;}}.

%% Hostname
{hosts, [&quot;localhost&quot;]}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might be wondering the user “myusername” isn’t yet registered with ejabberd, how come we defined here. We will registered him shortly after we are done with editing configuration file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hostname&lt;/strong&gt; defines the server at which ejabberd should listen and connect. If you are not using a local machine (i.e you are using VPS such as DigitalOcean) to host the XMPP chat server, you can mention the domain name or IP address here. I am assuming example.com as my VPS domain name, hence I will modify this line as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{hosts, [&quot;localhost&quot;,&quot;example.com&quot;]}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thats all the changes you have to make for now. Wasn’t that simple?
Once you have made the above changes, the cfg file will now look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%% Options which are set by Debconf and managed by ucf

%% Admin user
{acl, admin, {user, &quot;admin&quot;, &quot;localhost&quot;}}.
{acl, admin, {user, &quot;myusername&quot;, &quot;localhost&quot;}}

%% Hostname 
{hosts, [&quot;localhost&quot;,&quot;example.com&quot;]}. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now exit the nano editor by pressing CTRL + X. This will prompt you if you want to overwrite the previous cfg file, press &lt;strong&gt;Y&lt;/strong&gt;, then press Enter again to confirm. This will bring you back to terminal screen.&lt;/p&gt;

&lt;p&gt;We have mentioned that “myusername” is another user holding administrative rights to ejabberd, but we still haven’t registered him yet. Lets register him as well. Enter following command to register:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ejabberdctl register myusername localhost password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace “password” with whatever password you want to use to login. Once you are done with this, You have to re-start your ejabberd server by issuing this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service ejabberd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congradulations, We have successfully setup our ejabberd chat server. Lets visit the administrative control panel and see what we got there. Fire up your public domain name in your favorite browser on port 5280 to login to ejabberd server: http://example.com:5280 .This will bring up webpage asking you for username and password. Login with username: myusername@localhost, password: whatever you mentioned earlier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;- The &lt;em&gt;localhost&lt;/em&gt; in above username &lt;em&gt;myusername@localhost&lt;/em&gt; represents domain name of user. If you are not sure, edit &lt;em&gt;ejabberd.cfg&lt;/em&gt; and check for user. The line, for “myusername” looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;{acl, admin, {user, &quot;myusername&quot;, &quot;localhost&quot;}}&lt;/code&gt;, the last part is domain name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;- For users running on local machines, you can simple use http://localhost:5280. To find your locally accessible ip address, run following command (&lt;code class=&quot;highlighter-rouge&quot;&gt;ipconfig&lt;/code&gt; for windows user):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and look for address in the form &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.0.xxx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, following screen will show up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://assets.digitalocean.com/articles/community/eJabberdAdmin1.png&quot; alt=&quot;ejabberd admin panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have now successfully installed ejabberd on your machine and can be used to connect to any XMPP based chat client. In the next post, you’ll learn how to implement XMPP chat client in android code. Have fun!!&lt;/p&gt;

&lt;p&gt;Thanks for going threw entire long post. Please like and share if you like the article. Ask anything in comments below.&lt;/p&gt;

&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting:&lt;/h3&gt;

&lt;p&gt;Sometimes, ejabberd might not open up in your browser and will give &lt;code class=&quot;highlighter-rouge&quot;&gt;Connection timed out&lt;/code&gt; error. It usually happens if firewall is blocking ports on which ejabberd relies for communication stuffs. Usually those ports are 5222, 5269, 5280. You can try opening those ports like I did below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter following commands in terminal:&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 5222 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 5269 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 5280 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Open up &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file. &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nano /etc/hosts&lt;/code&gt;  and add your domain name into it (assuming your public ip address is 123.123.10.210) :&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;123.123.10.210 example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Allow ubuntu firewall&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow 5222
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow 5269
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow 5280
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will open the ports and allow public connections, which should fix the issue.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Apr 2016 19:02:06 +0900</pubDate>
        <link>http://localhost:4000/xmpp-chat-server/</link>
        <guid isPermaLink="true">http://localhost:4000/xmpp-chat-server/</guid>
        
        
        <category>Uncategorized</category>
        
      </item>
    
      <item>
        <title>Get video links from Coursera</title>
        <description>&lt;p&gt;I have gone threw coursera classes now and then. What I felt is need for a coursera video downloader. I searched but couldn’t found any good working one.&lt;/p&gt;

&lt;p&gt;Hence here is a small script I developed which would give you all video links from coursera. Here is what you’ll have to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goto your class. For ex- Mine was  &lt;a href=&quot;https://www.coursera.org/course/startup&quot;&gt;https://www.coursera.org/course/startup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Enroll and go to video lectures from left tab. Here is the screenshot&lt;/li&gt;
  &lt;li&gt;in chrome, press &lt;kbd&gt;f12&lt;/kbd&gt; to bring up chrome inspector. You can also right click anywhere on webpage and click &lt;strong&gt;inspect element&lt;/strong&gt;. Go to &lt;strong&gt;console&lt;/strong&gt; tab.&lt;/li&gt;
  &lt;li&gt;Paste the following script into the console:&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ul.course-item-list-section-list &amp;gt; li&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a[data-link-type=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lecture:download.mp4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Press enter and hopefully, it will parse every video link in the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you’ve liked the article and it helped you. Please do comment if I owe any explanations. Share, it might be helpful to others.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jan 2016 14:50:23 +0900</pubDate>
        <link>http://localhost:4000/get-video-links-from-coursera/</link>
        <guid isPermaLink="true">http://localhost:4000/get-video-links-from-coursera/</guid>
        
        <category>coursera</category>
        
        <category>download</category>
        
        <category>javascript</category>
        
        <category>jquery</category>
        
        
        <category>Javascript</category>
        
      </item>
    
      <item>
        <title>How to download multiple videos from youtube-dl</title>
        <description>&lt;p&gt;Like me, you must’ve also faced a similar situation when you needed to download multiple videos from a site. In case you’re also a frequent webnair/seminar viewer or a youtube fan, you must’ve came across a beautiful ultility called &lt;a href=&quot;https://rg3.github.io/youtube-dl&quot;&gt;Youtube-dl&lt;/a&gt; ( to download videos from your favourite sites such as youtube, vimeo etc.&lt;/p&gt;

&lt;p&gt;Here is how to download multiple videos from your favourite sites (I am using videmo as an example).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open up a command prompt (windows) or terminal(Linux), and go to location where you want to download the videos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; Create a blank text file in that location. Paste your list of URLs in that file. Remember to press Enter after each link. Lets say, you named the file “download.txt”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy and paste the following command in your terminal/command prompt&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;youtube-dl &lt;span class=&quot;nt&quot;&gt;-ci&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;download.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will start downloading every url mentioned in the file.&lt;/p&gt;

&lt;p&gt;For me, the download speed was slow as compared to some download accelerator programs. I wanted just the download links, so I can download it via some custom made downloaders. Here is how you can output the links to another file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;youtube-dl &lt;span class=&quot;nt&quot;&gt;-cgi&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;download.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you also want the titles along with each link to be printed, just add &lt;strong&gt;-e&lt;/strong&gt; switch to above command. This will become&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;youtube-dl &lt;span class=&quot;nt&quot;&gt;-cgei&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--batch-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;download.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 03:38:03 +0900</pubDate>
        <link>http://localhost:4000/how-to-download-multiple-videos-from-youtube-dl/</link>
        <guid isPermaLink="true">http://localhost:4000/how-to-download-multiple-videos-from-youtube-dl/</guid>
        
        <category>download</category>
        
        <category>python</category>
        
        <category>youtube-dl</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Process Migration</title>
        <description>&lt;p&gt;A general block diagram of process in an OS looks something like this figure:&lt;/p&gt;

&lt;div style=&quot;width: 480px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;img class=&quot;&quot; src=&quot;http://www.csie.ntnu.edu.tw/~swanky/os/chap4/PCB.png&quot; alt=&quot;Process Control Block diagram&quot; width=&quot;470&quot; height=&quot;830&quot; /&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Process Control Block diagram
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Main things to consider regarding a process are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Process state&lt;/li&gt;
  &lt;li&gt;Data being used by a process&lt;/li&gt;
  &lt;li&gt;Pointers and stuff in the Program counter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To move a process to another machine, above things have to be created in the destination machine. This is what process migration is all about.&lt;/p&gt;

&lt;p&gt;Remember, process is just a program in execution. so, basically, we have to create new process with set of thread that are executing in source machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps in process migration&lt;/strong&gt;–&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Source machine request destination machine if migration can happen. Known as _migration request. _After some kind of negotiation, it is granted.&lt;/li&gt;
  &lt;li&gt;The source machine then halt the process. communication is also temporarily queued so that it can later to sent to the new copy of current process in destination machine.&lt;/li&gt;
  &lt;li&gt;System then analyze and collect process’s state, which includes memory state(memory content owned by process), processor state(content in CPU registers) as well as open files or any kernel context codes(if any). Some files and kernel code are OS dependent which is not allowed for transfer.&lt;/li&gt;
  &lt;li&gt;A new process instance on destination machine is then created. The state saved in previous step is now transferred to this new instance. Sometimes, not all the states are required immediately, so they gets transferred later.&lt;/li&gt;
  &lt;li&gt;Once the sufficient amount of state transfer is done, process gets activated on destination machine.&lt;/li&gt;
  &lt;li&gt;The communication, which was being queues(in step 2), is now redirected to this new process. The queuing process runs parallel wrt STEP 3,4,5.&lt;/li&gt;
  &lt;li&gt;Sometimes, OS makes reference of migrated process, in order to control or communicate the process in future.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2015 13:53:38 +0900</pubDate>
        <link>http://localhost:4000/process-migration/</link>
        <guid isPermaLink="true">http://localhost:4000/process-migration/</guid>
        
        <category>mobile computing</category>
        
        <category>mtech</category>
        
        
        <category>M.Tech</category>
        
        <category>Mobile Computing</category>
        
      </item>
    
      <item>
        <title>Mobile Computing notes</title>
        <description>&lt;p&gt;This is only a gentle introduction. I will try to cover as much as I can in further posts. Will make posts topic wise so as to cover everything related to a topic in a single post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Migration- &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Act of transferring processes between two computers, through a wired or wireless medium.&lt;/li&gt;
  &lt;li&gt;A process has its process table, code segments, some data and pointers etc. This all needs to be transferred by some logic.&lt;/li&gt;
  &lt;li&gt;Used to balance load on systems. One overloaded machine can transfer process to an under-loaded one.&lt;/li&gt;
  &lt;li&gt;Originated with distributed systems. Still used in multicore(multiple processors) systems as part of process scheduling of OS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mobile Computing-&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Defined as &lt;em&gt;ability to use technology&lt;/em&gt;(&lt;em&gt;this part is called as computing&lt;/em&gt;) to access to some centrally located resources/information by remote and mobile devices such as  smartphones.&lt;/li&gt;
  &lt;li&gt;Mobility is divided into 3 categories:
    &lt;ol&gt;
      &lt;li&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Macro Mobility&lt;/span&gt;: When moving into and out of a global network. Maintaining connectivity is main challenge here. &lt;em&gt;Mobile IP&lt;/em&gt; take cares for this one.&lt;/li&gt;
      &lt;li&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Micro Mobility&lt;/span&gt;: When moving inside one region(cell) only. &lt;em&gt;Cellular IP&lt;/em&gt; take cares for this&lt;/li&gt;
      &lt;li&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Ad hoc Mobility&lt;/span&gt;: Refers to mobility within an Mobile Ad hoc Networks(MANET). Happens due to continuous changes in the network infrastructure. Thus, the infrastructure-less networks (&lt;em&gt;MANET&lt;/em&gt;) take cares for this one.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Major benefit is increased computation power regardless of location/infrastructure. Wether be it a office or restaurant, you’ll always be connected to remote services, thus increasing productivity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mobile Agents&lt;/strong&gt;–&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Programs that moves across the networks, here and there, on behalf of user.&lt;/li&gt;
  &lt;li&gt;Gathers information as well as execute automated tasks given by users.&lt;/li&gt;
  &lt;li&gt;Specifically, “&lt;em&gt;A mobile agent is a composition of computer program, data, and execution state, which is able to move from one computer to another autonomously and continue its execution on the destination computer&lt;/em&gt;“&lt;/li&gt;
  &lt;li&gt;Widely used by e-commerce industries, stock holders etc. It is a specific form of &lt;a title=&quot;Wikipedia&quot; href=&quot;https://en.wikipedia.org/wiki/Mobile_code&quot; target=&quot;_blank&quot;&gt;mobile code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Examples are- agent Tcl, aglet etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Working (TL;DR)&lt;/strong&gt; : The program can suspend its execution at an arbitrary point, transport itself to another machine, and then resume execution from the point of suspension.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2015 01:13:55 +0900</pubDate>
        <link>http://localhost:4000/mobile-computing-notes/</link>
        <guid isPermaLink="true">http://localhost:4000/mobile-computing-notes/</guid>
        
        <category>mobile computing</category>
        
        <category>mtech</category>
        
        
        <category>M.Tech</category>
        
        <category>Mobile Computing</category>
        
      </item>
    
      <item>
        <title>How to add wishlist to shopify</title>
        <description>&lt;p&gt;Shopify does not provide “add wishlist” feature natively. It becomes an obvious need for theme developers. So I will help you how to add wishlist to shopify.  &lt;a href=&quot;https://github.com/jimlakey/Shopify-Wish-List&quot; title=&quot;Wishlist-Shopify&quot;&gt;This Github Repo&lt;/a&gt; is all you need for a minimal effort development of this feature. So, I am going to tell how can you use the repo files and have the wishlist functionality to your shopify store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;: Download the repo or clone it. you will get 3 files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wish-list.js&lt;/li&gt;
  &lt;li&gt;wishlist-page.liquid&lt;/li&gt;
  &lt;li&gt;wishlist-product.liquid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;: Go to your shopify store’s admin panel. Navigate to your theme (http://your-store-url.com/admin/themes) and choose “Edit HTML/CSS” from the dropdown of active theme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 3&lt;/strong&gt;: Upload wish-list.js in “assets” directory. [&lt;img src=&quot;http://codeasashu.tk/blog/wp-content/uploads/2015/07/add-assets-1024x318.jpg&quot; alt=&quot;add-assets&quot; class=&quot;aligncenter wp-image-31 size-large&quot; width=&quot;1024&quot; height=&quot;318&quot; /&gt;] Now you have to create wishlist-page.liquid and wishlist-product.liquid in snippets (just above “assets”). Create both the files and copy the contents of the same files you downloaded. [&lt;img src=&quot;http://codeasashu.tk/blog/wp-content/uploads/2015/07/wishlist.jpg&quot; alt=&quot;wishlist&quot; class=&quot;aligncenter wp-image-32 size-full&quot; width=&quot;969&quot; height=&quot;273&quot; /&gt;] Now that you’ve uploaded the 3 files to your shopify, you can forward to next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 4&lt;/strong&gt;: Now let’s get the things running. So you need 2 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Adding a wishlist button to product pages&lt;/li&gt;
  &lt;li&gt;Making a page where customers can view their wishlist&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, open up product.liquid. What I’m going to do next is very important. So, make sure you do it carefully not making any mistake.&lt;/p&gt;

&lt;p&gt;Include the “wishlist-product.liquid” to get the “Add to wishlist” button. So include it as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% include &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wishlist-product'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can include it anywhere in product.liquid, but within “Add to cart” form. &lt;strong&gt;Make sure it is outside “Add to cart” form or it won’t work&lt;/strong&gt;. So, for a minimal example, it will go like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/cart/add&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enctype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;product&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemscope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://schema.org/Product&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemprop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ shop.url }}{{ product.url }}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemprop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ product | img_url: 'grande' }}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main_image&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ '' | img_url: 'grande' }}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;
      &amp;lt;div id=&quot;thumbnails&quot;&amp;gt;
      &amp;lt;div class=&quot;thumbs&quot;&amp;gt;&amp;lt;img src=&quot;{{ '' | img_url: 'grande' }}&quot;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;thumbs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ '' | img_url: 'grande' }}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;
      &amp;lt;div class=&quot;thumbs&quot;&amp;gt;&amp;lt;img src=&quot;{{ '' | img_url: 'grande' }}&quot;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&amp;lt;!-- #thumbnails --&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#images --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% else &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;featured_image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selected_or_first_available_variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;featured_image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;featured_image&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}

&amp;lt;div id=&quot;images&quot;&amp;gt;
&amp;lt;div id=&quot;main_image&quot;&amp;gt;&amp;lt;img class=&quot;showlight&quot; src=&quot;{{ featured_image | img_url: 'grande' }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbnails&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
  {% if product.images.size &amp;gt; 1 %}
        {% for image in product.images %}
        {% if forloop.index &amp;lt;= 3 %} 
        &amp;lt;div class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbs&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;img src=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;img_url: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'small'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;/div&amp;gt;
        {% endif %}
        {% endfor %}
  {% else %}
    &amp;lt;div class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbs&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;img src=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;img_url: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'grande'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;/div&amp;gt;
  {% endif %}
  &amp;lt;/div&amp;gt;
  {% endif %}
  &amp;lt;/div&amp;gt;

&amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
&amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ product.title }}&amp;lt;/div&amp;gt;
  {% assign variant = product.selected_or_first_available_variant %}
          {% if product.compare_at_price &amp;gt; product.price %}
          &amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{ variant.price | money }}&amp;lt;/div&amp;gt;
          &amp;lt;s class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ variant.compare_at_price | money }}&amp;lt;/s&amp;gt;
          {% else %}
          &amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ variant.price | money }}&amp;lt;/div&amp;gt;
          {% endif %}
&amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ product.description }}&amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variants&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
        &amp;lt;select id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; name=&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
        {% for variant in product.variants %}
          &amp;lt;option{% if variant == product.selected_or_first_available_variant %} selected{% endif %} value=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
          {{ variant.title }} - {{ variant.price | money }}
          &amp;lt;/option&amp;gt;
        {% endfor %}
        &amp;lt;/select&amp;gt;
      &amp;lt;/div&amp;gt;     
&amp;lt;div id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;input type=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addtocart&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to_cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;

{% include 'wishlist-product' %} &amp;lt;!-- Notice this is outside the &quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; form --&amp;gt;
&amp;lt;/div&amp;gt;
{{ 'wish-list.js' | asset_url | script_tag }} &amp;lt;!-- Placed at bottom of product.liquid --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you save the file, you can see a “Add to wishlist” button on product page. Remember, you must be logged-in to make the button work. We’ve completed most of the hard part. The only thing remaining is to view the items of your wishlist.  For that, see next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 5&lt;/strong&gt;:  Creating a page to view wishlist items- Since there might be many pages already in your store, you should design a separate page for wishlist. Shopify provides it in much convenient way. Basic idea to get a unique page to display some unique content is to have a separate template for that page, then selecting that template in the unique page you create. Since you want wishlist page to show only wishlist items and no other bullshit, here is what you’d do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a template for wishlist. Go to “Templates” - “Add a new template”. Select “page” from the dropdown and enter “wishlist” into textbox next to it. [&lt;img src=&quot;http://codeasashu.tk/blog/wp-content/uploads/2015/07/wishlist-page.jpg&quot; alt=&quot;wishlist-page&quot; class=&quot;aligncenter wp-image-34 size-full&quot; width=&quot;1018&quot; height=&quot;281&quot; /&gt;]&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It will create a blank “page.wishlist.liquid” file. Enter following contents to it:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include 'wishlist-page' %}
{{ 'wish-list.js' | asset_url | script_tag }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the “wish-list.js” acts as a controller to wishlist. Removing it will disable the functionality.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a page from “http://your-store-url.com/admin/pages” . Enter Title “Wishlist” and scroll down. You can see a dropdown at bottom, in the “template” section. See the screenshot below[&lt;img src=&quot;http://codeasashu.tk/blog/wp-content/uploads/2015/07/page-1024x521.jpg&quot; alt=&quot;page&quot; class=&quot;aligncenter wp-image-35 size-large&quot; width=&quot;1024&quot; height=&quot;521&quot; /&gt;]&lt;/li&gt;
  &lt;li&gt;Select “page.wishlist” from the dropdown. It is the same template you just create in previous steps. If you are not seeing any “template” section or dropdown like this, this means you have only “page.liquid” in “template” directory. Create “page.wishlist.liquid” as explained.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have this page where you can view your wishlist, you have completed all the steps. Try logging in and add a product to wishlist. Go to the wishlist page you created and it will show your wishlist items.&lt;/p&gt;

&lt;p&gt;Please do comment below if you need any help.&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Jul 2015 11:21:44 +0900</pubDate>
        <link>http://localhost:4000/how-to-add-wishlist-to-shopify/</link>
        <guid isPermaLink="true">http://localhost:4000/how-to-add-wishlist-to-shopify/</guid>
        
        <category>shopify</category>
        
        <category>theme development</category>
        
        
        <category>Shopify</category>
        
      </item>
    
      <item>
        <title>Parsing JSON with Ruby</title>
        <description>&lt;p&gt;Parsing JSON with Ruby is actually extremely easy. All you have to do is have the json gem installed (&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install json&lt;/code&gt;) and call the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt; method on the JSON data to convert it to ruby hashes. If you look at this small program here, you can see how I have implemented parsing JSON in Ruby.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'net/http'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'libnotify'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsejson&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://api.openweathermap.org/data/2.5/find?q=London&amp;amp;mode=json&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;weatherjson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weatherjson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# check for errors&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_key?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Error'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;error with the url&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listitem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;weather&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;temp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;273.15&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%.2f&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 23 Dec 2013 02:18:23 +0900</pubDate>
        <link>http://localhost:4000/ruby/2013/12/23/ruby-json.html</link>
        <guid isPermaLink="true">http://localhost:4000/ruby/2013/12/23/ruby-json.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
  </channel>
</rss>
